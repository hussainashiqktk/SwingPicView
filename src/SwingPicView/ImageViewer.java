/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SwingPicView;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.util.Arrays;
import java.util.Comparator;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author namra
 */
public class ImageViewer extends javax.swing.JFrame {

    private static String selectedImagePath = null;
    private int rotationAngle = 0;
    private String folderPath;
    private static File[] imageFiles;
    private static int currentIndex;
    private static int selectedIndex = 0;
    private static int previousIndex;
    private static int FirstIndex;

    /**
     * Creates new form ImageViewer
     */
    public ImageViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        btnOpenImage = new javax.swing.JButton();
        lblDisplayedImg = new javax.swing.JLabel();
        btnRotate = new javax.swing.JButton();
        btnZoomIn = new javax.swing.JButton();
        btnZoomOut = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnOpenImage.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnOpenImage.setText("Open Image");
        btnOpenImage.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnOpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenImageActionPerformed(evt);
            }
        });

        lblDisplayedImg.setText("                                     Image Here");

        btnRotate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnRotate.setForeground(new java.awt.Color(0, 255, 0));
        btnRotate.setText("Rotate");
        btnRotate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRotateActionPerformed(evt);
            }
        });

        btnZoomIn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnZoomIn.setText("Zoom In");
        btnZoomIn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomInActionPerformed(evt);
            }
        });

        btnZoomOut.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnZoomOut.setText("Zoom Out");
        btnZoomOut.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomOutActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnNext.setText("Next");
        btnNext.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnBack.setText("Previous");
        btnBack.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 0, 0));
        btnDelete.setText("Delete");
        btnDelete.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 64, Short.MAX_VALUE)
                .addComponent(lblDisplayedImg, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRotate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnZoomIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnZoomOut, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addGap(460, 460, 460)
                .addComponent(btnOpenImage, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(btnRotate)
                        .addGap(29, 29, 29)
                        .addComponent(btnZoomIn)
                        .addGap(29, 29, 29)
                        .addComponent(btnZoomOut)
                        .addGap(38, 38, 38)
                        .addComponent(btnNext)
                        .addGap(30, 30, 30)
                        .addComponent(btnBack)
                        .addGap(29, 29, 29)
                        .addComponent(btnDelete))
                    .addComponent(lblDisplayedImg, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnOpenImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenImageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter imageFilter = new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png", "gif");
        fileChooser.setFileFilter(imageFilter);

        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String extension = getFileExtension(selectedFile);
            folderPath = selectedFile.getParent();

            if (selectedIndex == 0) {
                imageFiles = getImageFiles(folderPath);
                System.out.println(imageFiles.length);
            }
            for (File file : imageFiles) {
                System.out.println(file.getAbsolutePath());
            }

            if (extension.equalsIgnoreCase("jpg") || extension.equalsIgnoreCase("jpeg")
                    || extension.equalsIgnoreCase("png") || extension.equalsIgnoreCase("gif")) {
                displayImage(selectedFile);
            } else {
                String message = "Selected file format: ." + extension.toUpperCase() + "\nPlease select an image file.";
                JOptionPane.showMessageDialog(null, message, "Invalid File", JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnOpenImageActionPerformed

    private void btnRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRotateActionPerformed

        BufferedImage image = loadImage();  // Replace with your image loading logic
        if (image != null) {
            rotationAngle = (rotationAngle + 90) % 360; // Specify the rotation angle in degrees
            BufferedImage rotatedImage = rotateImage(image, rotationAngle);
            ImageIcon rotatedIcon = new ImageIcon(rotatedImage);
            Image originalImage = rotatedIcon.getImage(); // get the original image
            Image scaledImage = originalImage.getScaledInstance(lblDisplayedImg.getWidth(), lblDisplayedImg.getHeight(), Image.SCALE_SMOOTH); // create a scaled version of the image
            ImageIcon scaledIcon = new ImageIcon(scaledImage); // create a new ImageIcon from the scaled image
            lblDisplayedImg.setIcon(scaledIcon); // set the scaled icon as the icon for the JLabel

        } else {
            JOptionPane.showMessageDialog(null, "No Image Selected");
        }


    }//GEN-LAST:event_btnRotateActionPerformed

    private void btnZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomInActionPerformed

        String path = selectedImagePath;
        if (path != null) {
            zoomImage();
        } else {
            JOptionPane.showMessageDialog(null, "No Image Selected");
        }


    }//GEN-LAST:event_btnZoomInActionPerformed

    private void zoomImage() {
        ImageIcon icon = (ImageIcon) lblDisplayedImg.getIcon();
        if (icon != null) {
            Image image = icon.getImage();
            int newWidth = (int) (image.getWidth(null) * 1.2); // Increase the width by 20%
            int newHeight = (int) (image.getHeight(null) * 1.2); // Increase the height by 20%
            Image zoomed = image.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            lblDisplayedImg.setIcon(new ImageIcon(zoomed));
        }
    }


    private void btnZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomOutActionPerformed

        String path = selectedImagePath;
        if (path != null) {
            // Check if the image is currently zoomed in
            ImageIcon icon = (ImageIcon) lblDisplayedImg.getIcon();
            if (icon != null) {
                Image image = icon.getImage();
                int currentWidth = image.getWidth(null);
                int currentHeight = image.getHeight(null);
                int originalWidth = lblDisplayedImg.getWidth();
                int originalHeight = lblDisplayedImg.getHeight();

                if (currentWidth > originalWidth || currentHeight > originalHeight) {
                    zoomOutImage();
                } else {
                    JOptionPane.showMessageDialog(null, "Image not Zoom In so No Further Zoom Out");
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "No Image Selected");
        }
    }//GEN-LAST:event_btnZoomOutActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed

        // Check if there are image files in the folder
        if (imageFiles != null && imageFiles.length > 0) {
            // Get the next image file
            // currentIndex = (currentIndex ) % imageFiles.length;
            currentIndex++;
            if (currentIndex >= imageFiles.length) {

                JOptionPane.showMessageDialog(null, "Last Image Of Folder");
                currentIndex--;
            }
            if (currentIndex < imageFiles.length) {

                File nextImageFile = imageFiles[currentIndex];
                System.out.println("Current Index: " + currentIndex);
                System.out.println("Next Image Path: " + imageFiles[currentIndex]);
                // Update the image label with the next image
                ImageIcon nextImage = new ImageIcon(nextImageFile.getPath());
                Image originalImage = nextImage.getImage(); // get the original image
                Image scaledImage = originalImage.getScaledInstance(lblDisplayedImg.getWidth(), lblDisplayedImg.getHeight(), Image.SCALE_SMOOTH); // create a scaled version of the image
                ImageIcon scaledIcon = new ImageIcon(scaledImage); // create a new ImageIcon from the scaled image
                lblDisplayedImg.setIcon(scaledIcon); // set the scaled icon as the icon for the JLabel
                selectedImagePath = nextImageFile.getAbsolutePath();
            }
        }
    }//GEN-LAST:event_btnNextActionPerformed
//
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // Check if there are image files in the folder
        if (imageFiles != null && imageFiles.length > 0) {
       
           
            previousIndex = currentIndex;
            currentIndex--;
            
//            if(currentIndex!=0)
//            {previousIndex = currentIndex;
//            currentIndex--;}
           System.out.println("Current Index: " + currentIndex);
           System.out.println("previousIndex: " + previousIndex);
           
           
            if (currentIndex < 0) {

                JOptionPane.showMessageDialog(null, " No  More Previous Image Of Folder");
                currentIndex++;
            }
            
            if (currentIndex < previousIndex && currentIndex >= 0) {

                File nextImageFile = imageFiles[currentIndex];
                System.out.println("Current Index: " + currentIndex);
                System.out.println(" Previous Image Path: " + imageFiles[currentIndex]);
                // Update the image label with the next image
                ImageIcon nextImage = new ImageIcon(nextImageFile.getPath());
                Image originalImage = nextImage.getImage(); // get the original image
                Image scaledImage = originalImage.getScaledInstance(lblDisplayedImg.getWidth(), lblDisplayedImg.getHeight(), Image.SCALE_SMOOTH); // create a scaled version of the image
                ImageIcon scaledIcon = new ImageIcon(scaledImage); // create a new ImageIcon from the scaled image
                lblDisplayedImg.setIcon(scaledIcon); // set the scaled icon as the icon for the JLabel
                selectedImagePath = nextImageFile.getAbsolutePath();
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String path = selectedImagePath;
        int j;
        String string3 = null;
        if (path != null) {
            
            // Delete the image file from the folder
            File imageFile = new File(path);
            if (imageFile.delete()) {
                
                System.out.println("Image deleted: " + path);
                for (File file : imageFiles) {
                    System.out.println("Before Clear " + file.getAbsolutePath());
                }
                if(currentIndex!=imageFiles.length-1)
                { File file1 = imageFiles[currentIndex++];
                 string3 = file1.getAbsolutePath();}
                
                if(currentIndex==imageFiles.length-1)
                { File file1 = imageFiles[currentIndex--];
                 string3 = file1.getAbsolutePath();}

                imageFiles = new File[0];
                imageFiles = getImageFiles(folderPath);
                System.out.println(imageFiles.length);

                for (File file : imageFiles) {
                    System.out.println(file.getAbsolutePath());
                }

                for (int i = 0; i < imageFiles.length; i++) {

                    File file2 = imageFiles[i];

                    String string4 = file2.getAbsolutePath();
                    
                    if (string3.equals(string4)) {
                        System.out.println("The strings are equal.");
                        currentIndex = i;
                        System.out.println("Index is: " + currentIndex);
                        System.out.println("Looping Path : " + file2.getAbsolutePath());
                        System.out.println("Selected Path : " + string3);
                    }

                }
            }
        }
//                else  {
//            System.out.println("Failed to delete image: " + path);
//              }
//            } else {
//                System.out.println("No image selected.");
//            }


        if (currentIndex >= imageFiles.length) {

            JOptionPane.showMessageDialog(null, "Last Image Of Folder");

        }
        if (currentIndex < imageFiles.length) {

            File nextImageFile = imageFiles[currentIndex];
            System.out.println("Next Image Path: " + imageFiles[currentIndex]);
            // Update the image label with the next image
            ImageIcon nextImage = new ImageIcon(nextImageFile.getPath());
            Image originalImage = nextImage.getImage(); // get the original image
            Image scaledImage = originalImage.getScaledInstance(lblDisplayedImg.getWidth(), lblDisplayedImg.getHeight(), Image.SCALE_SMOOTH); // create a scaled version of the image
            ImageIcon scaledIcon = new ImageIcon(scaledImage); // create a new ImageIcon from the scaled image
            lblDisplayedImg.setIcon(scaledIcon); // set the scaled icon as the icon for the JLabel
            selectedImagePath = nextImageFile.getAbsolutePath();
        }

//      
//      if (currentIndex ==i)
//      {
//            currentIndex--;
//            File nextImageFile = imageFiles[currentIndex];
//            System.out.println("Previous Image Path: " + imageFiles[currentIndex]);
//            // Update the image label with the next image
//            ImageIcon nextImage = new ImageIcon(nextImageFile.getPath());
//            Image originalImage = nextImage.getImage(); // get the original image
//            Image scaledImage = originalImage.getScaledInstance(lblDisplayedImg.getWidth(), lblDisplayedImg.getHeight(), Image.SCALE_SMOOTH); // create a scaled version of the image
//            ImageIcon scaledIcon = new ImageIcon(scaledImage); // create a new ImageIcon from the scaled image
//            lblDisplayedImg.setIcon(scaledIcon); // set the scaled icon as the icon for the JLabel
//            selectedImagePath = nextImageFile.getAbsolutePath();
//        }
//   

    }//GEN-LAST:event_btnDeleteActionPerformed



    private void zoomOutImage() {
        ImageIcon icon = (ImageIcon) lblDisplayedImg.getIcon();
        if (icon != null) {
            Image image = icon.getImage();
            int newWidth = (int) (image.getWidth(null) / 1.2); // Decrease the width by 20%
            int newHeight = (int) (image.getHeight(null) / 1.2); // Decrease the height by 20%
            Image zoomedOut = image.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            lblDisplayedImg.setIcon(new ImageIcon(zoomedOut));
        }
    }

    private static String getFileExtension(File file) {
        String fileName = file.getName();
        if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0) {
            return fileName.substring(fileName.lastIndexOf(".") + 1);
        } else {
            return "";
        }
    }

    private static void displayImage(File file) {

        ImageIcon originalIcon = new ImageIcon(file.getAbsolutePath());
        Image originalImage = originalIcon.getImage(); // get the original image
        Image scaledImage = originalImage.getScaledInstance(lblDisplayedImg.getWidth(), lblDisplayedImg.getHeight(), Image.SCALE_SMOOTH); // create a scaled version of the image
        ImageIcon scaledIcon = new ImageIcon(scaledImage); // create a new ImageIcon from the scaled image
        lblDisplayedImg.setIcon(scaledIcon); // set the scaled icon as the icon for the JLabel
        selectedImagePath = file.getAbsolutePath();
        String string1 = selectedImagePath;
        System.out.println("selectedImagePath: " + string1);

        for (int i = 0; i < imageFiles.length; i++) {

            File file1 = imageFiles[i];

            String string3 = file1.getAbsolutePath();
            if (string1.equals(string3)) {
                System.out.println("The strings are equal.");
                currentIndex = i;
                System.out.println("Index is: " + currentIndex);
                System.out.println("Looping Path : " + file1.getAbsolutePath());
                System.out.println("Selected Path : " + file.getAbsolutePath());
            }
       
        }
        
    }

    private static BufferedImage loadImage() {
        try {
            File file = new File(selectedImagePath);  // Replace with the path to your image file
            return ImageIO.read(file);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private static BufferedImage rotateImage(BufferedImage image, int angle) {
        int width = image.getWidth();
        int height = image.getHeight();
        BufferedImage rotatedImage = new BufferedImage(width, height, image.getType());

        Graphics2D g2d = rotatedImage.createGraphics();
        AffineTransform transform = new AffineTransform();

        transform.rotate(Math.toRadians(angle), width / 2, height / 2);
        g2d.setTransform(transform);
        g2d.drawImage(image, 0, 0, null);
        g2d.dispose();

        return rotatedImage;
    }

    private File[] getImageFiles(String folderPath) {
        File folder = new File(folderPath);
        //currentIndex = 0;
        selectedIndex = 0;
        return folder.listFiles((dir, name) -> {
            String lowercaseName = name.toLowerCase();
            return lowercaseName.endsWith(".jpg") || lowercaseName.endsWith(".jpeg")
                    || lowercaseName.endsWith(".png") || lowercaseName.endsWith(".gif");
        });

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageViewer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageViewer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageViewer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageViewer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ImageViewer().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    public javax.swing.JButton btnOpenImage;
    private javax.swing.JButton btnRotate;
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JButton btnZoomOut;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private static javax.swing.JLabel lblDisplayedImg;
    // End of variables declaration//GEN-END:variables

    private String getFileExtension() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
